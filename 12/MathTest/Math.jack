// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static int powers_of_two;

    /** Initializes the library. */
    function void init() {
        var int temp, i;
        let temp = 1;
        let powers_of_two = Array.new(16);
        let i = 0;
        while(i < 16){
            let powers_of_two[i] = temp;
            let temp = temp + temp;
            let i = i + 1;
        }
        return;
    }

    function int two_to_the_i(int i){
        return powers_of_two[i];
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0){
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
    	var int i, sum, lshift_x;
		let sum = 0;
		let i = 0;
		let lshift_x = x;
		while(i < 16) {
			if(powers_of_two[i] & y) {
				let sum = sum + lshift_x;
			}
			let lshift_x = lshift_x + lshift_x;
			let i = i + 1;
		}
		return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {		var int q, output;	//quotient, result
		var bool neg;
		let neg = (x < 0) = (y < 0);
		let x = Math.abs(x);
		let y = Math.abs(y);
		if(y > x){
			return 0;
		}
		let q = Math.divide(x, y + y);
		if((x - (2 * y * q)) < y) {
			let output = 2 * q;
		} else {
			let output = 2 * q + 1;
		}
		if(neg) {
			return output;
		} else {
			return -output;
		}
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
    	var int y, j, res, res_2;
		let y = 0;
		let j = 7;
		while(~(j < 0)) {
			let res = y + powers_of_two[j];
			let res_2 = res * res;
			if(~(res_2 > x) & (res_2 > 0)) {
				let y = res;
			}
			let j = j - 1;
		}
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a < b){
            return b;
        }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a > b){
            return b;
        }
        return a;
    }
}
