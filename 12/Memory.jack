// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array memory, free_list;
    static int length_index, next_index;


    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let length_index = 1;
        let next_index = 0;
        let free_list = 2048;
        let free_list[length_index] = 16384 - 2048;
        let free_list[next_index] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array block, newBlock;
        var int block_next, block_size;
        let block = free_list;
        let block_size = block[length_index];
        let block_next = block[next_index];
        if (block_size > (size + 2)) {
            let free_list = free_list + size + 2;
            let free_list[length_index] = block_size - size - 2;
            let free_list[next_index] = 0;
            let block[length_index] = size;
            let block[next_index] = 0;
            return block + 2;
        }
        while (~block_next) {
            let block = block_next;
            let block_size = block[length_index];
            let block_next = block[next_index];
            if (block_size > (size + 2)) {
                let block_size = block_size - size - 2;
                let block[length_index] = block_size;
                let newBlock = block + block_size;
                let newBlock[next_index] = 0;
                let newBlock[length_index] = size;
                return newBlock + 2;
            }
        }
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array object) {
    	var Array current;
		let current = free_list;
		while(~current) {
			if(~current[0]) {
				let current[0] = object;
				let object[0] = null;
			}
			let current = current[0];
		}
		return;
    }    
}
