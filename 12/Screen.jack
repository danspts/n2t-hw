
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean color, black, white;
    static int screen;


    /** Initializes the Screen. */
    function void init() {
        let white = 0;
        let black = -1;
        let color = black;
        let screen = 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while( i < 8192 ) {
            let screen[i] = white;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
    	var int address;
		let address =  (32 * y) + (x / 16);
		if(color) {
			let screen[address] = screen[address] | Math.two_to_the_i(x & 15);
		} else {
			let screen[address] = screen[address] & (~Math.two_to_the_i(x & 15));
		}
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, next_a, next_b, triangle, a , b;

        if( (x1 = x2) & (y1 = y2) ) {
            return;
        }

        let dx = x2 - x1;
		let dy = y2 - y1;

		if(dx < 0) {
			let dx = -dx;
			let next_a = -1;
		} else {
			if(dx > 0) {
				let next_a = 1;
			}
		}

		if(dy < 0) {
			let dy = -dy;
			let next_b = -1;
		} else {
			if(dy > 0) {
				let next_b = 1;
			}
		}

        let triangle = 0;
		let a = 0;
		let b = 0;

        while(~((Math.abs(a) > dx) | (Math.abs(b) > dy))) {
			do Screen.drawPixel(x1 + a, y1 + b);
			if(triangle < 0) {
				let a = a + next_a;
				let triangle = triangle + dy;
			} else {
				let b = b + next_b;
				let triangle = triangle - dx;
			}
		}
		return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		while(~(y1 > y2 )) {
			do Screen.drawLine(x1 ,y1, x2, y1);
			let y1 = y1 + 1;
		}
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, x1, x2, r_2;
        let dy = -r;
        let r_2 = r * r;
        while(~(dy > r)) {
            let x1 = x - Math.sqrt(r_2 - (dy * dy));
            let x2 = x + Math.sqrt(r_2 - (dy * dy));
            do Screen.drawLine(x1, y + dy, x2, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
